#User 
# get RhUser details
GET_USER_BY_EMAIL_AND_RHID=select user from RhUser user where user.userMailid =:email and user.rhId=:rhId and user.isDeleted =:isDeleted
GET_RH_USER_BY_ID = SELECT users FROM RhUser users WHERE users.id =:ID and users.isDeleted =0
CHECK_USER_EXIST=CALL PRC_GET_USERID_STATUS(:user)
GET_USER_INFO_BY_USER_ID=CALL PRC_PERSONAL_INFO(:userId)
GET_FIRST_NAME_LAST_NAME.HQL = select usr.firstName,usr.lastName from RhUser usr where usr.userMailid =:userMailid
GET_USER_ROLE=select user from RhUser user where (user.id in (:userIds) or user.userMailid in (:email)) and user.enumItemUserRoleId=(select enumItem.id from RhEnumItem enumItem where enumItem.enumItemCode=:enumRoleCode) and user.isDeleted=:isDeleted
GET_USER_ROLE_ID=select user from RhUser user where (user.id in (:userIds) ) and user.enumItemUserRoleId=(select enumItem.id from RhEnumItem enumItem where enumItem.enumItemCode=:enumRoleCode) and user.isDeleted=:isDeleted
#candidate exam info
GET_CANDIDATE_EXAM_LIST.HQL = call PRC_CANDIDATE_EXAM_INFO(:userId, :examStatus, :fromDate, :toDate, :eligibilityCode)	

#procedure to get candidate details by proctor
GET_CANDIDATE_DETAILS=call PRC_GET_CANDIDATE_SESSION_DETAILS(:guuId)

GET_LIST_OF_USERS=select user.id as id, concat(user.firstName,' ',user.lastName) as name from RhUser user where user.id in (:id)  

#query to get policies
POLICY.HQL=select policy from RhPolicy policy

#query to get faqs
FAQ.HQL=select faq from RhFAQ faq	

#procedure to get admins for notification
GET_REGIONAL_ADMIN_USERID=call PRC_GET_REGIONAL_ADMIN_BY_COUNTRY(:countryId)

# queries for Upload Id
CHECK_IS_IDENTITY_REQUIRED_FOR_COUNTRY = select country.isIdentityRequired from RhCountryMaster country where country.id = :countryId and country.isDeleted=:isDeleted

#procedure to get proctor details
GET_PROCTOR_DETAILS=CALL PRC_GET_PROCTOR_DETAILS(:rhId)
GET_PROCTOR_SESSION_DETAILS=CALL PRC_GET_PROCTOR_SESSION_DETAILS(:userId,:rhId)

#query to get user by rhid or uuid
GET_USER_BY_RHID_UUID= select user from RhUser user where (user.rhId=:rhId or user.rhUserUuid=:uuid) and user.isDeleted=:isDeleted

GET_USER_BY_RHID=select user from RhUser user where user.rhId=:rhId and user.isDeleted=:isDeleted
#Exam 
#exam related queries
GET_EXAM_BY_EXAM_CODE_HQL=select exam from RhExamMaster exam where exam.examCode =:examCode
GET_EXAM_CODE=select rhExamMaster.examCode from RhExamMaster rhExamMaster where rhExamMaster.id=:examId
GET_EXAM_NAME_BY_ELIGIBILITY_CODE=select eligibility.rhExamMaster.examName from RhUserEligibility eligibility where eligibility.eligiblityCode = :eligibilityCode and eligibility.isDeleted =:isDeleted
GET_EXAM_STATUS_CODES_LIST= select examstatus.examStatusCode,examstatus.examStatus from VwGetexamstatus examstatus
GET_EXAM_DELIVERIES_STATUS_CODES_LIST= select examstatus.examStatusCode,examstatus.examStatus from VwGetexamDeliveriesstatus examstatus
GET_EXAM_LIST_COUNT = select count(1) from RhExamMaster examMaster where examMaster.examName like :searchText or examMaster.examCode like :searchText order by examMaster.examName
GET_EXAM_NAME_CODE_LIST = select examMaster.id, examMaster.examCode, examMaster.examName, examMaster.isDeleted from RhExamMaster examMaster where examMaster.examName like :searchText or examMaster.examCode like :searchText order by examMaster.examName
GET_DATA_EXAM_RETAKE=select userExamScheduleDtl.examStartDateTime,userExamScheduleDtl.rhExamMaster.examRetakeInterval,userEligibility.rhExamMaster.examCode  from RhUserExamScheduleDtl userExamScheduleDtl,RhUserEligibility userEligibility  where  userEligibility.eligiblityCode=:eligibilityCode and userEligibility.isDeleted=:isDeleted and userExamScheduleDtl.rhUser.id=:userId and userExamScheduleDtl.enumItemExamScheduleStatusId in (select enumItem.id from  RhEnumItem enumItem where enumItem.enumItemCode in (:enumCode)) and userEligibility.rhExamMaster.examCode=userExamScheduleDtl.rhExamMaster.examCode and userEligibility.rhExamMaster.isDeleted=:isDeleted ORDER BY userExamScheduleDtl.examStartDateTime DESC
GET_EXAMS_CODE = select distinct rhuserExam.rhExamMaster.id as examId, concat(rhuserExam.rhExamMaster.examCode,':',rhuserExam.rhExamMaster.examName) as showStr  from RhUserExamScheduleDtl rhuserExam where rhuserExam.rhExamMaster.isDeleted = 0 and (rhuserExam.rhExamMaster.examCode like :examCode or rhuserExam.rhExamMaster.examName like :examName)
GET_EXAMS_DETAILS = select rhuserExam.id as uuid, rhuserExam.rhUser.firstName as firstName, rhuserExam.rhUser.lastName as lastName, rhuserExam.rhLocationMaster.locationCode as locationName , concat(rhuserExam.rhLocationMaster.streetAddress1,' ', rhuserExam.rhLocationMaster.streetAddress2,' ',rhuserExam.rhLocationMaster.zipCode) as locationAddress,  rhuserExam.rhExamMaster.examCode as examCode,rhuserExam.rhExamMaster.examName as examName, DATE_FORMAT(rhuserExam.examStartDateTime,'%Y-%m-%d') as examDate from RhUserExamScheduleDtl rhuserExam where rhuserExam.rhUser.isDeleted = 0 and rhuserExam.enumItemExamScheduleStatusId in (:examStatus)
GET_EXAMS_CODE_ID = select rhEnumItem.id from RhEnumItem rhEnumItem where rhEnumItem.enumItemCode = :enumCode
GET_EXAM_RETIRE_STATUS=select eligibility.rhExamMaster.isDeleted from RhUserEligibility eligibility where eligibility.eligiblityCode=:eligibilityCode and eligibility.isDeleted=:isDeleted
GET_ELIGIBILITY_EXPIRATION_DATE = select eligibility.expirationDate from RhUserEligibility eligibility where eligibility.rhUser.id = :userId and eligibility.eligiblityCode = :eligibilityCode and eligibility.rhUser.isDeleted = :isDeleted and eligibility.isDeleted = :isDeleted

# Procedure to check availability of time slots 
#PRC_CHECK_AVAILABILITY_OF_TIMESLOT= call PRC_EXAM_SCHEDULE_CHECK(:examId, :locationId, :examStartDateTime)
#PRC_CHECK_AVAILABILITY_OF_TIMESLOT= call PRC_EXAM_SCHEDULE_CHECK(:locationId, :examStartDateTime, :eligibilityCode, :examStartDateTime_Local)
#PRC_CHECK_AVAILABILITY_OF_TIMESLOT= call PRC_EXAM_SCHEDULE_CHECK(:locationId, :examStartDateTime, :examStartDateTime_Local, :eligibilityCode)
PRC_CHECK_AVAILABILITY_OF_TIMESLOT= call PRC_EXAM_SCHEDULE_CHECK(:locationId, :examStartDateTime, :examStartDateTime_Local, :eligibilityCode, :isGlobalAdmin, :domain, :domainWithExtension, :emailID)


#queries related to time slots and time zone
GET_TIMEZONE_FROM_ID=select rhtimezonemaster.code from RhTimezoneMaster rhtimezonemaster where rhtimezonemaster.id=:timezoneId
PRC_FIND_EXAM_TIME_SLOTS = call PRC_GET_TIMESLOTS(:eligibilityCode,:locationId,:fromDate,:toDate)
GET_TIMEZONE_BY_ID = select timezone.code from RhTimezoneMaster timezone where timezone.id = :timezoneId
GET_ALL_TIMEZONE = select timezonemaster.id,timezonemaster.code from RhTimezoneMaster timezonemaster order by timezonemaster.code
PRC_GET_EXAM_TIME_DETAILS = call PRC_GET_EXAM_TIME_DETAILS(:eligibilityCode,:locationId)
PRC_GET_LOCATION_CALENDAR_DETAILS = call PRC_GET_LOCATION_CALENDAR_DETAILS(:locationId,:fromDate,:toDate,:eligibilityExpiry)
PRC_GET_ALL_KOALA_BOOKING_DETAILS = call PRC_GET_ALL_KOALA_BOOKING_DETAILS(:locationId,:fromDate,:toDate, :domain, :domainWithExtension, :emailID)
PRC_GET_EXCEPTION_CALENDAR_DETAILS = call PRC_GET_EXCEPTION_CALENDAR_DETAILS(:locationId,:fromDate,:toDate)
GET_TIMEZONE_BY_LOCATION_ID= select location.rhCityMaster.rhTimezoneMaster.code from RhLocationMaster location where location.id=:locationId

#eligibility related queries
CHECK_ELIGIBILITY_EXISTS.HQL= select userEligibility from RhUserEligibility userEligibility where userEligibility.rhUser.id= :userId and userEligibility.eligiblityCode=:eligibilityCode and userEligibility.isDeleted=:isDeleted
GET_EXAM_SCHEDULE_DETAIL_BY_ELIGIBILITY_CODE.HQL=select rhUserExamScheduleDtl from RhUserExamScheduleDtl rhUserExamScheduleDtl where rhUserExamScheduleDtl.rhUserEligibility.eligiblityCode=:eligibilityCode and rhUserExamScheduleDtl.rhUser.id= :userId and rhUserExamScheduleDtl.rhUserEligibility.isDeleted=:isDeleted
GET_ELIGIBILITY_ID=select userEligibility.id from RhUserEligibility userEligibility where userEligibility.rhUser.id= :userId and userEligibility.eligiblityCode=:eligibilityCode and userEligibility.isDeleted=:isDeleted

#Country
#query to get list of countries
GET_COUNTRY_LIST = select country.id,country.countryName,country.isIdentityRequired from RhCountryMaster country where country.isDeleted=:isDeleted 
GET_COUNTRY_LIST_IDENTITY_IS_REQUIRED = and country.isIdentityRequired =:isRequired 
GET_ORDERED_COUNTRY_LIST = order by country.countryName

#Location
#query to get time zone by city id
GET_TIMEZONE_BY_CITYID = SELECT city.rhTimezoneMaster.id, city.rhTimezoneMaster.code from RhCityMaster city where city.isDeleted = :isDeleted AND city.id = :cityId
GET_TIMEZONE_DESCRIPTION_BY_CODE = Select timezone.description from RhTimezoneMaster timezone where timezone.code= :timezoneCode group by timezone.code

#query to get list of all locations
GET_LOCATION_LIST =call PRC_GET_LOCATIONS()
  
#query to get blacklisted location
GET_BLACKLISTED_LOCATIONS=select rhBlacklistedExam.rhLocation from RhBlacklistedExamLocation rhBlacklistedExam, RhExamMaster rhExamMaster where rhBlacklistedExam.rhExam=rhExamMaster.id and rhBlacklistedExam.rhExam=:examId and rhBlacklistedExam.isDeleted =:isDeleted

#queries related to nominee
GET_NOMINEE_LIST=select DISTINCT rhLocationMailDtl from RhLocationMailDtl rhLocationMailDtl
GET_NOMINEE_LIST_REGIONAL = and rhLocationMailDtl.rhLocationMaster.rhCityMaster.rhStateMaster.rhCountryMaster.rhRegionMaster.id in (userDetail.rhRegionMaster.id) and userDetail.rhUser.id=:userId and userDetail.isDeleted = 0 and userDetail.rhUser.isDeleted= 0
GET_NOMINEE_LIST_SITE = and rhLocationMailDtl.rhLocationMaster.id in (userDetail.rhLocationMaster.id) and userDetail.rhUser.id=:userId and userDetail.isDeleted = 0 and userDetail.rhUser.isDeleted= 0
GET_NOMINEE_LIST_ORDER_BY = order by rhLocationMailDtl.firstName
GET_NOMINEE_EMAIL_DETAILS = call PRC_GET_NEXTDAY_EXAMS()

#location related queries for filter
GET_REGION_LIST=select region.id,region.regionName from RhRegionMaster region where region.isDeleted=:isDeleted order by region.regionName
GET_COUNTRY_LIST_ADMIN = select country.id,country.countryName,country.rhRegionMaster.id from RhCountryMaster country where country.isDeleted = :isDeleted
GET_KEYBOARD_TYPE_LIST=select enumItem.id,enumItem.enumItemName from RhEnumItem enumItem where enumItem.rhEnum.enumCode=:keyboardType order by enumItem.enumItemName
GET_LOCATION_LIST_ADMIN=select location.id,location.locationCode,location.rhCityMaster.rhStateMaster.rhCountryMaster.id,concat(location.streetAddress1,', ',COALESCE(location.streetAddress2,''),location.rhCityMaster.cityName,', ',location.rhCityMaster.rhStateMaster.stateName,', ',location.rhCityMaster.rhStateMaster.rhCountryMaster.countryName,', ',location.zipCode) as locationAddress from RhLocationMaster location where location.rhCityMaster.isDeleted=:isDeleted and location.rhCityMaster.rhStateMaster.isDeleted=:isDeleted and location.rhCityMaster.rhStateMaster.rhCountryMaster.isDeleted=:isDeleted
UPDATE_LOCATION_STATUS= update RhLocationMaster locationMaster set locationMaster.enumItemLocationStatusId =:enumItemLocationStatusId where locationMaster.id =:id
UPDATE_LOCATION_STATUS_VIA_KOALA= update RhLocationMaster locationMaster set locationMaster.enumItemLocationStatusId =:enumItemLocationStatusId where locationMaster.id=(select rhieDtl.rhLocationMaster.id from RhLocationRhieDtl rhieDtl where rhieDtl.id=:id)
GET_ACTIVE_LOCATION_FOR_KOALA = select count(*) from RhLocationRhieDtl RhieDtl where RhieDtl.rhLocationMaster.id = (select rhieDtl.rhLocationMaster.id from RhLocationRhieDtl rhieDtl where rhieDtl.id=:id) and RhieDtl.enumItemLocationRhieStatusId =:enumItemLocationRhieStatusId
GET_BUSINESS_CENTER_LIST = select rhBusinessCenterMaster.id,rhBusinessCenterMaster.businessCenterCode from RhBusinessCenterMaster rhBusinessCenterMaster where rhBusinessCenterMaster.isDeleted = :isDeleted order by rhBusinessCenterMaster.businessCenterCode
GET_STATE_LIST = select state.id,state.stateName,state.rhCountryMaster.id from RhStateMaster state where state.isDeleted = :isDeleted and state.rhCountryMaster.isDeleted=:isDeleted order by state.stateName
GET_CITY_LIST = select city.id,city.cityName,city.rhStateMaster.id from RhCityMaster city where city.isDeleted = :isDeleted and city.rhStateMaster.isDeleted=:isDeleted order by city.cityName
GET_STATE_LIST_BY_COUNTRY_ID = select state.id,state.stateName,state.rhCountryMaster.id from RhStateMaster state where state.isDeleted = :isDeleted AND state.rhCountryMaster.id = :countryId and state.rhCountryMaster.isDeleted=:isDeleted order by state.stateName
GET_CITY_LIST_BY_STATE_ID = select city.id,city.cityName,city.rhStateMaster.id from RhCityMaster city where city.isDeleted = :isDeleted AND city.rhStateMaster.isDeleted=:isDeleted and city.rhStateMaster.id = :stateId order by city.cityName
GET_LOCATION_USER_DTL_BY_LOC = select locationUser from RhLocationUser locationUser where locationUser.rhLocationMaster.id = :locationId
GET_LOCATION_LIST_BY_BUSINESS_CENTER_ID=select location.id,location.locationCode,location.rhBusinessCenterMaster.id,concat(location.streetAddress1,', ',COALESCE(location.streetAddress2,''),location.rhCityMaster.cityName,', ',location.rhCityMaster.rhStateMaster.stateName,', ',location.rhCityMaster.rhStateMaster.rhCountryMaster.countryName,', ',location.zipCode) as locationAddress from RhLocationMaster location where location.rhCityMaster.isDeleted=:isDeleted and location.rhCityMaster.rhStateMaster.isDeleted=:isDeleted and location.rhCityMaster.rhStateMaster.rhCountryMaster.isDeleted=:isDeleted and location.rhBusinessCenterMaster.isDeleted=:isDeleted
GET_LOCATION_LIST_BASED_ON_LOGGED_IN_USER = select userDtl.rhLocationMaster.id , userDtl.rhLocationMaster.locationCode from RhUserDetail userDtl where userDtl.rhUser.id =:id and userDtl.isDeleted=:isDeleted and userDtl.rhUser.isDeleted=:isDeleted
GET_LOCATION_DETAILS = SELECT location.id  ,regionmaster.id   ,location.streetAddress1    ,location.streetAddress2  ,countrymaster.id ,statemaster.id ,citymaster.id ,location.zipCode  , (SELECT code FROM RhTimezoneMaster timezoneMaster where timezoneMaster.id = citymaster.rhTimezoneMaster.id) as timezone ,location.enumItemKeyboardTypeId,location.locationCode  ,location.rhBusinessCenterMaster.id  ,location.rhProctorGrpMaster.id,location.contactNoForCandidate ,  location.enumItemLocationStatusId FROM RhLocationMaster location JOIN location.rhCityMaster as citymaster JOIN location.rhCityMaster.rhStateMaster as statemaster JOIN location.rhCityMaster.rhStateMaster.rhCountryMaster as countrymaster JOIN location.rhCityMaster.rhStateMaster.rhCountryMaster.rhRegionMaster as regionmaster  WHERE citymaster.isDeleted = :isDeleted and statemaster.isDeleted = :isDeleted and countrymaster.isDeleted= :isDeleted and regionmaster.isDeleted = :isDeleted and location.id = :locationId
GET_LOCATION_BY_LOCATION_ID =select location from RhLocationMaster location where location.id=:locationId 
GET_COUNTRY_BY_LOCATION_ID= select DISTINCT location.rhCityMaster.rhStateMaster.rhCountryMaster.id,location.rhCityMaster.rhStateMaster.rhCountryMaster.countryName from RhLocationMaster location where location.rhCityMaster.isDeleted=:isDeleted and location.rhCityMaster.rhStateMaster.isDeleted=:isDeleted and location.rhCityMaster.rhStateMaster.rhCountryMaster.isDeleted=:isDeleted 
GET_LOCATION_DETAIL_BY_SITE_ADMIN_ID=and location.id in (select userDetail.rhLocationMaster.id from RhUserDetail userDetail where userDetail.rhUser.id=:userId and userDetail.isDeleted=:isDeleted and userDetail.rhUser.isDeleted=:isDeleted)
GET_LOCATION_DETAIL_BY_REGIONAL_ADMIN_ID=and location.rhCityMaster.rhStateMaster.rhCountryMaster.rhRegionMaster.id = (select DISTINCT(userDetail.rhRegionMaster.id) from RhUserDetail userDetail where userDetail.rhUser.id=:userId and userDetail.isDeleted=:isDeleted and userDetail.rhUser.isDeleted=:isDeleted) and location.rhCityMaster.isDeleted=:isDeleted and location.rhCityMaster.rhStateMaster.isDeleted=:isDeleted and location.rhCityMaster.rhStateMaster.rhCountryMaster.isDeleted=:isDeleted and location.rhCityMaster.rhStateMaster.rhCountryMaster.rhRegionMaster.isDeleted=:isDeleted

#proctor group related queries
GET_PROCTOR_GROUP_LIST = select rhProctorGrpMaster.id,rhProctorGrpMaster.proctorGrpCode from RhProctorGrpMaster rhProctorGrpMaster where rhProctorGrpMaster.isDeleted = :isDeleted order by rhProctorGrpMaster.proctorGrpCode
GET_PROCTOR_GROUP_DETAILS= select group from RhProctorGrpAllocation group where group.rhProctorGrpMaster.id in :groupList and group.rhUser.enumItemUserRoleId=(select enumItem.id from RhEnumItem enumItem where enumItem.rhEnum.enumCode=:enumCode and enumItem.enumItemCode=:enumRoleCode) and group.isLeadEligible = 1

GET_PROCTOR_GROUP_DETAILS_FOR_GLOBAL_ADMIN= select group from RhProctorGrpAllocation group where group.rhProctorGrpMaster.id in :groupList  and group.isLeadEligible = 1 and group.rhUser.id=:userId
GET_PROCTOR_MASTER_GROUP_DETAILS_FOR_GLOBAL_ADMIN= select group from RhProctorGrpMaster group where group.id in :groupList

#query to update blacklisted exam
UPDATE_BLACKLISTED_EXAM=update RhBlacklistedExamLocation blacklisted set blacklisted.isDeleted=:isDeleted,blacklisted.modifiedby=:modifiedby,blacklisted.modifiedon=:modifiedon where blacklisted.rhExam=:examId and blacklisted.rhLocation=:locationId 

#query to get audit detail
GET_AUDIT_DATA=select rhLocationMailDtl from RhLocationMailDtlAud rhLocationMailDtl where rhLocationMailDtl.revtype=2 and rhLocationMailDtl.id.id=:id 

#query to get exams and to get blacklisted status
GET_EXAM_LIST_LOCATION_SETTINGS= select vwGetExamBlackList from VwGetExamBlacklistDtl vwGetExamBlackList where vwGetExamBlackList.id.locationId=:locationId 

# query to get all location user types
GET_LOCATION_USER_TYPE_LIST = select locationUserType from RhLocationUserType locationUserType

#query to get koalas
GET_KOALA_LIST= select locationRhieDtl.id,locationRhieDtl.rhieId,locationRhieDtl.macAddress,locationRhieDtl.serialNumber,enumItem.enumItemCode,enumItem.enumItemName from RhLocationRhieDtl locationRhieDtl,RhEnumItem enumItem where locationRhieDtl.rhLocationMaster.id =:id and enumItem.id = locationRhieDtl.enumItemLocationRhieStatusId
GET_KOALA_DETAILS_FOR_ACTIVE = select rhieDtl from RhLocationRhieDtl rhieDtl where (rhieDtl.serialNumber =:serialNumber or rhieDtl.macAddress =:macAddress) and rhieDtl.enumItemLocationRhieStatusId !=:status

#Common queries
#queries related to enum item
GET_ENUM_ITEM_LIST = select enumitem.id, enumitem.enumItemCode from RhEnumItem enumitem where enumitem.rhEnum.enumCode = :enumCode
GET_ENUM_AND_SEQUENCE=select enumItem.rhEnum, max(enumItem.enumItemSequence) from RhEnumItem enumItem where enumItem.rhEnum.enumCode=:enumCode
GET_ENUM_ITEM_LOCATION_KOALA=select enumitem.id from RhEnumItem enumitem where enumitem.rhEnum.enumCode =:enumCode and enumitem.enumItemCode =:enumItemCode
GET_ENUM_ITEM_BY_CODE = select enumitem.id from RhEnumItem enumitem where enumitem.enumItemCode = :enumCode

#update exam status by admin
UPDATE_EXAM_STATUS=update RhExamMaster rhExamMaster set rhExamMaster.isDeleted = :isDeleted where rhExamMaster.id =:id

#token related queries
FIND_TOKEN_BY_USER.HQL=select userToken from RhUserToken userToken where userToken.rhUser.id = :id and userToken.enumItemUserRoleId = :roleId and userToken.rhUser.isDeleted = :isDeleted
FIND_KEY_BY_TOKEN.HQL=Select userToken from RhUserToken userToken where userToken.token= :token
GET_RH_USER_TOKEN_BY_TOKEN = select rhUserToken from RhUserToken rhUserToken where rhUserToken.token =:token

#proctor related
GET_OFFICE_DETAILS_BY_NAME = select rhProctorOffice from RhProctorOffice rhProctorOffice where rhProctorOffice.officeName = :officeName and rhProctorOffice.isDeleted = :is_deleted
GET_OFFICE_DETAILS_BY_ID = select rhProctorOffice from RhProctorOffice rhProctorOffice where rhProctorOffice.id = :ID and rhProctorOffice.isDeleted = :is_deleted
GET_ALL_OFFICE_DETAILS = SELECT rhProctorOffice.id as id, rhProctorOffice.officeName as name FROM RhProctorOffice rhProctorOffice where rhProctorOffice.isDeleted = :is_deleted order by rhProctorOffice.officeName

#Integration 
#Procedure to get koala details for gumtree
GET_SQS_INFORMATION_BY_ID = CALL PRC_GET_KOALA_DETAILS_FOR_GUMTREE(:Id)

#Get eligibility to cancel
GET_ELIGIBILITY_CANCELLATION= select eligibility from RhUserEligibility eligibility where eligibility.rhUser.rhId=:rhId and eligibility.rhExamMaster.examCode=:examCode and eligibility.eligiblityCode=:eligibilityCode

#koala status
GET_LOCATION_ID=select rhLocationRhieDtl.rhLocationMaster.id from RhLocationRhieDtl rhLocationRhieDtl where rhLocationRhieDtl.macAddress = :macAddress and rhLocationRhieDtl.serialNumber= :serialNumber
UPDATE_RHIE_STATUS=update RhLocationRhieDtl rhLocationRhieDtl set rhLocationRhieDtl.rhieId = :rhieId,rhLocationRhieDtl.detail= :detail,rhLocationRhieDtl.enumItemLocationRhieStatusId= :enumItemLocationRhieStatusId, rhLocationRhieDtl.timestamp= :timestamp where rhLocationRhieDtl.macAddress = :macAddress and rhLocationRhieDtl.serialNumber= :serialNumber

#queries related to lms message
GET_LMS_MESSAGE_STATUS_BY_UUID=select lmsMessage from RhPushExamStatusToLm lmsMessage where lmsMessage.rhUserExamScheduleDtl.id=:uuid and lmsMessage.cronJobStatusId = :FAIL
GET_LMS_DATA_FOR_ALL = select rhPushExamStatusToLm from RhPushExamStatusToLm rhPushExamStatusToLm where (rhPushExamStatusToLm.cronJobStatusId = :FAIL) or (coalesce(rhPushExamStatusToLm.modifiedon,rhPushExamStatusToLm.createdon)<= :time and rhPushExamStatusToLm.cronJobStatusId =:INPROGRESS) order by rhPushExamStatusToLm.rhUserExamScheduleDtl.id, rhPushExamStatusToLm.createdon asc
GET_ALL_EXPIRED_ELIGIBILITY=select eligibility from RhUserEligibility eligibility where eligibility.expirationDate>=:startDate and eligibility.expirationDate<=:endDate  and eligibility.isDeleted=:isDeleted and eligibility.isSentForCron =:isSentForCron and eligibility.createdby = :userType
GET_LMS_DATE_FOR_FAILED_RECORDS = select rhPushLms from RhPushExamStatusToLm rhPushLms where rhPushLms.failCount>=:resendAttempt and rhPushLms.cronJobStatusId = :FAIL order by rhPushLms.rhUserExamScheduleDtl.id, rhPushLms.createdon asc

#query to cancel eligibility
GET_EXAM_SCHEDULE_DTL_BY_ELIGIBILITY_RHID_STATUS= select userExamSchedule from RhUserExamScheduleDtl userExamSchedule where userExamSchedule.rhUserEligibility.eligiblityCode=:eligibilityCode and userExamSchedule.rhUser.rhId=:rhId and userExamSchedule.enumItemExamScheduleStatusId in (:status)

#queries related to gumtree
GUMTREE_GET_EXAM_SCHEDULES = select examSchedule.rhUser.certificateId as c_cert_id, examSchedule.rhUser.userMailid as c_email, examSchedule.rhUser.firstName as c_firstname, examSchedule.rhUser.lastName as  c_lastname,examSchedule.rhUser.userContactno as c_phone, examSchedule.examStartDateTime as c_starttime, examSchedule.rhExamMaster.examCode as e_code, examSchedule.rhExamMaster.examSetupTime as e_setuptime, examSchedule.rhLocationRhieDtl.rhieId as rhie_id,enumMaster.enumItemCode as r_status,  examSchedule.id as s_id, examSchedule.rhLocationMaster.rhCityMaster.rhStateMaster.rhCountryMaster.countryIso2Code as c_country from RhUserExamScheduleDtl examSchedule, RhEnumItem enumMaster where examSchedule.examStartDateTime>=:startDate and examSchedule.examStartDateTime <=:endDate and enumMaster.id =  examSchedule.enumItemExamScheduleStatusId
GUMTREE_GET_EXAM_SCHEDULES_WITH_RHIE = and examSchedule.rhLocationRhieDtl.rhieId=:rhieId

#Schedule Exam
#query to get retention policy
GET_RETENTION_POLICY_DATA=select appConfig from RhAppConfiguration appConfig where appConfig.attributeCode in (:retentionPolicyCode)

#query to get proctor group details
GET_PROCTOR_GROUP_BASED_ON_LOCATION = SELECT rhProctorGrp FROM RhLocationProctorGrp WHERE rhLocation = :locationId and rhLocation.isDeleted = :isDeleted
CHECK_GROUP_AVAIL_OR_NOT = SELECT rh_user_exam.location_Id FROM rh_user_exam_schedule_dtl rh_user_exam, rh_location_master rh_location,rh_proctor_grp_allocation rh_proctor WHERE rh_user_exam.id =:uuid AND rh_user_exam.location_id = rh_location.id AND rh_location.proctor_grp_id = rh_proctor.proctor_grp_id AND rh_proctor.proctor_id=:id AND rh_proctor.is_deleted=0

#query to update exam session by proctor
GET_RHI_PROCTOR_BY_ID = select rhRhieProctor from RhRhieProctor rhRhieProctor where rhRhieProctor.rhUserExamScheduleDtl.id=:uuid
UPDATE_PROCTOR_EXAM_REMOVE_DTL = update RhRhieProctor rhieProctor set rhieProctor.rhUser2.id =:observerProctor,rhieProctor.modifiedby =:modifiedby,rhieProctor.modifiedon =:modifiedon,rhieProctor.reason =:reason where rhieProctor.rhUserExamScheduleDtl.id =:uuid
UPDATE_PROCTOR_EXAM_SESSION_DTL = update RhRhieProctor rhieProctor set rhieProctor.rhUser2.id =:observerProctor,rhieProctor.rhUser1.id =:primaryProctor,rhieProctor.modifiedby =:modifiedby,rhieProctor.modifiedon =:modifiedon,rhieProctor.reason =:reason where rhieProctor.rhUserExamScheduleDtl.id =:uuid

#query to get Exam date time
GET_EXAM_START_DATE_TIME = SELECT examStartDateTime from RhUserExamScheduleDtl  where id =:id
CHECK_GROUP_AVAIL_OR_NOT = SELECT rh_user_exam.location_Id FROM rh_user_exam_schedule_dtl rh_user_exam, rh_location_master rh_location,rh_proctor_grp_allocation rh_proctor WHERE rh_user_exam.id =:uuid AND rh_user_exam.location_id = rh_location.id AND rh_location.proctor_grp_id = rh_proctor.proctor_grp_id AND rh_proctor.proctor_id=:id AND rh_proctor.is_deleted=0
GET_SCHEDULED_EXAM_DETAILS_BY_DATE = select concat(examDtl.rhUser.firstName,' ',examDtl.rhUser.lastName) as candidateName,examDtl.rhUser.userContactno as candidateContactNumber, examDtl.rhUser.userMailid as candidateEmail,concat(examDtl.rhExamMaster.examCode,':',examDtl.rhExamMaster.examName) as examCodeName,examDtl.rhLocationMaster.locationCode as locationName,concat(examDtl.rhLocationMaster.streetAddress1,', ',(CASE WHEN examDtl.rhLocationMaster.streetAddress2 is not null and examDtl.rhLocationMaster.streetAddress2!='' THEN concat(examDtl.rhLocationMaster.streetAddress2,', ') ELSE '' END),examDtl.rhLocationMaster.rhCityMaster.cityName,', ',examDtl.rhLocationMaster.rhCityMaster.rhStateMaster.stateName,', ',examDtl.rhLocationMaster.rhCityMaster.rhStateMaster.rhCountryMaster.countryName,', ',examDtl.rhLocationMaster.zipCode) as locationAddress,examDtl.examStartDateTime as examStartDateTime from RhUserExamScheduleDtl examDtl where examDtl.examStartDateTime>=:fromDate and examDtl.enumItemExamScheduleStatusId in (select enumItem.id from RhEnumItem enumItem where enumItem.enumItemCode in (:scheduled))
GET_SCHEDULED_EXAM_DETAILS_BY_DATE_BY_LOCATION = and examDtl.examStartDateTime <= :toDate  and examDtl.rhLocationMaster.id = :locationId
GET_EXAM_SCHEDULED_LIST= select scheduleDtl from RhUserExamScheduleDtl scheduleDtl where (scheduleDtl.rhExamMaster.id =:examId or DATE(scheduleDtl.examStartDateTime) in (select DATE(scheduleDtl.examStartDateTime)from RhUserExamScheduleDtl scheduleDtl where scheduleDtl.rhExamMaster.id =:examId)) and scheduleDtl.examStartDateTime >= :fromDate and (scheduleDtl.enumItemExamScheduleStatusId in (:scheduled)) order by scheduleDtl.rhLocationMaster.id,scheduleDtl.rhLocationRhieDtl.id,scheduleDtl.examStartDateTime
GET_SCHEDULED_EXAMS_OF_LOCATION=select concat(examDtl.rhUser.firstName,' ',examDtl.rhUser.lastName)as candidateName,examDtl.rhUser.userMailid as candidateEmail,examDtl.rhUser.userContactno as candidateContactNumber,examDtl.rhUser.accountNumber as accountNumber,examDtl.rhUserEligibility.eligiblityCode as referenceNumber ,concat(examDtl.rhExamMaster.examCode,':',examDtl.rhExamMaster.examName) as examCodeName,examDtl.rhLocationMaster.locationCode as locationName,concat(examDtl.rhLocationMaster.streetAddress1,', ',COALESCE(examDtl.rhLocationMaster.streetAddress2,''),examDtl.rhLocationMaster.rhCityMaster.cityName,', ',examDtl.rhLocationMaster.rhCityMaster.rhStateMaster.stateName,', ',examDtl.rhLocationMaster.rhCityMaster.rhStateMaster.rhCountryMaster.countryName,', ',examDtl.rhLocationMaster.zipCode) as locationAddress,examDtl.examStartDateTime as effectiveDate from RhUserExamScheduleDtl examDtl where examDtl.rhLocationMaster.id=:locationId and examDtl.enumItemExamScheduleStatusId in (:statusId) and examDtl.enumItemExamScheduleStatusId in (:scheduledStatusList) and examDtl.examStartDateTime>=:fromDate and examDtl.rhLocationMaster.id in (select userDetail.rhLocationMaster.id from RhUserDetail userDetail where userDetail.rhUser.id=:userId)
GET_SCHEDULED_EXAM_BY_UUID=select userExamDtl from RhUserExamScheduleDtl userExamDtl where userExamDtl.id=:id and userExamDtl.enumItemExamScheduleStatusId in (:status) and userExamDtl.examStartDateTime<=:fromDate

#queries to get error case data
GET_ERROR_CASE_DATA_WITH_ID=select  userExamScheduleDtl.rhUser.firstName,userExamScheduleDtl.rhUser.lastName,userExamScheduleDtl.examStartDateTime,userExamScheduleDtl.rhExamMaster.examCode,userExamScheduleDtl.rhExamMaster.examName,userExamScheduleDtl.rhLocationMaster.locationCode,concat(userExamScheduleDtl.rhLocationMaster.streetAddress1,', ',COALESCE(userExamScheduleDtl.rhLocationMaster.streetAddress2,''),userExamScheduleDtl.rhLocationMaster.rhCityMaster.cityName,', ',userExamScheduleDtl.rhLocationMaster.rhCityMaster.rhStateMaster.stateName,', ',userExamScheduleDtl.rhLocationMaster.rhCityMaster.rhStateMaster.rhCountryMaster.countryName,', ',userExamScheduleDtl.rhLocationMaster.zipCode) as locationAddress,enumItem.enumItemName,enumItem2.enumItemName,userExamScheduleDtl.rhLocationMaster.rhCityMaster.rhTimezoneMaster.code ,userExamScheduleDtl.id from RhUserExamScheduleDtl userExamScheduleDtl,RhEnumItem enumItem,RhEnumItem enumItem2  where enumItem.id=userExamScheduleDtl.enumItemExamScheduleStatusId and enumItem.enumItemCode in (:EXAM_SCHEDULE_STATUS) and enumItem2.id=userExamScheduleDtl.enumItemCandidateExamStatusId and enumItem2.enumItemCode in (:CANDIDATE_EXAM_STATUS)and userExamScheduleDtl.rhUser.isDeleted=:ZERO and  userExamScheduleDtl.rhExamMaster.isDeleted=:ZERO and userExamScheduleDtl.rhLocationMaster.rhCityMaster.isDeleted=:ZERO and userExamScheduleDtl.rhLocationMaster.rhCityMaster.rhStateMaster.isDeleted=:ZERO  and userExamScheduleDtl.rhLocationMaster.rhCityMaster.rhStateMaster.rhCountryMaster.isDeleted=:ZERO and userExamScheduleDtl.rhLocationMaster.rhCityMaster.rhStateMaster.rhCountryMaster.rhRegionMaster.isDeleted=:ZERO and userExamScheduleDtl.id=:id
GET_ERROR_CASE_DATA=select  userExamScheduleDtl.rhUser.firstName,userExamScheduleDtl.rhUser.lastName,userExamScheduleDtl.examStartDateTime,userExamScheduleDtl.rhExamMaster.examCode,userExamScheduleDtl.rhExamMaster.examName,userExamScheduleDtl.rhLocationMaster.locationCode,concat(userExamScheduleDtl.rhLocationMaster.streetAddress1,', ',COALESCE(userExamScheduleDtl.rhLocationMaster.streetAddress2,''),userExamScheduleDtl.rhLocationMaster.rhCityMaster.cityName,', ',userExamScheduleDtl.rhLocationMaster.rhCityMaster.rhStateMaster.stateName,', ',userExamScheduleDtl.rhLocationMaster.rhCityMaster.rhStateMaster.rhCountryMaster.countryName,', ',userExamScheduleDtl.rhLocationMaster.zipCode) as locationAddress,enumItem.enumItemName,enumItem2.enumItemName,userExamScheduleDtl.rhLocationMaster.rhCityMaster.rhTimezoneMaster.code,userExamScheduleDtl.id from RhUserExamScheduleDtl userExamScheduleDtl,RhEnumItem enumItem,RhEnumItem enumItem2  where enumItem.id=userExamScheduleDtl.enumItemExamScheduleStatusId and enumItem.enumItemCode in (:EXAM_SCHEDULE_STATUS) and enumItem2.id=userExamScheduleDtl.enumItemCandidateExamStatusId and enumItem2.enumItemCode in (:CANDIDATE_EXAM_STATUS)and userExamScheduleDtl.rhUser.isDeleted=:ZERO and  userExamScheduleDtl.rhExamMaster.isDeleted=:ZERO and userExamScheduleDtl.rhLocationMaster.rhCityMaster.isDeleted=:ZERO and userExamScheduleDtl.rhLocationMaster.rhCityMaster.rhStateMaster.isDeleted=:ZERO  and userExamScheduleDtl.rhLocationMaster.rhCityMaster.rhStateMaster.rhCountryMaster.isDeleted=:ZERO and userExamScheduleDtl.rhLocationMaster.rhCityMaster.rhStateMaster.rhCountryMaster.rhRegionMaster.isDeleted=:ZERO

#queries related to app configuration
GET_APP_CONFIGURATION_BY_CODE = select Distinct rhAppConfig from RhAppConfiguration rhAppConfig where rhAppConfig.attributeCode =:appConfigCode

#Admin 

#koala related queries
UPDATE_KOALA_STATUS= update RhLocationRhieDtl RhieDtl set RhieDtl.enumItemLocationRhieStatusId =:enumItemLocationRhieStatusId where RhieDtl.id =:id
GET_UNAVAILABLE_KOALA_STATUS=select enumitem.id from RhEnumItem enumitem,RhLocationRhieDtl location where enumitem.rhEnum.enumCode =:enumCode and enumitem.id=(select location.enumItemLocationRhieStatusId from RhLocationRhieDtl location where location.id=:id) and enumitem.enumItemCode=:UNAVAILABLE

#procedure to get list of admin based on search filters
GET_GLOBAL_ADMIN_LIST = CALL PRC_GET_ADMIN_LIST(:searchText,:regionId, :locationId, :adminId,:countryId)

#query to check active user while activating admin
GET_ACTIVE_USER_OF_SIMILAR_RHID=select rhUser from RhUser rhUser where rhUser.rhId in (select user.rhId from RhUser user where user.id != rhUser.id and (user.enumItemUserRoleId in (:role) and rhUser.enumItemUserRoleId in (:role) or user.enumItemUserRoleId in (:userRole) and rhUser.enumItemUserRoleId in (:userRole)) and rhUser.id = :id and user.isDeleted=:isDeleted)

#update user status
UPDATE_USER_STATUS= update RhUser user set user.isDeleted = :isDeleted, user.rhUserUuid =:uuid where user.id = :id and user.enumItemUserRoleId in (select enumItem.id from RhEnumItem enumItem where enumItem.enumItemCode in (:userRole))

#queries to get exam deliveries
GET_USER_EXAM_DELIVERIES=select concat(examDtl.rhUser.firstName,' ',examDtl.rhUser.lastName) as candidateName,concat(examDtl.rhExamMaster.examCode,':',examDtl.rhExamMaster.examName) as examCodeName,examDtl.rhLocationMaster.locationCode as locationName,concat(examDtl.rhLocationMaster.streetAddress1,', ',COALESCE(examDtl.rhLocationMaster.streetAddress2,''),examDtl.rhLocationMaster.rhCityMaster.cityName,', ',examDtl.rhLocationMaster.rhCityMaster.rhStateMaster.stateName,', ',examDtl.rhLocationMaster.rhCityMaster.rhStateMaster.rhCountryMaster.countryName,', ',examDtl.rhLocationMaster.zipCode) as locationAddress,(case when examDtl.enumItemExamScheduleStatusId in (:scheduledStatusList) then 'SCHEDULED' when examDtl.enumItemExamScheduleStatusId in (:completedStatusList) then 'COMPLETED' when examDtl.enumItemExamScheduleStatusId = (:noShowStatus) then 'NO SHOW' else '' end) as status,DATE_FORMAT(examDtl.examStartDateTime,'%Y-%m-%d %H:%i:%s') as effectiveDate, examDtl.rhUser.accountNumber as accountNumber,examDtl.rhUserEligibility.eligiblityCode as referenceNumber 
GET_USER_EXAM_DELIVERIES_LOCATION= examDtl.rhLocationMaster.id=:locationId and 
GET_USER_EXAM_DELIVERIES_REGION= examDtl.rhLocationMaster.rhRegionMaster.id=:regionId and 
GET_USER_EXAM_DELIVERIES_FROMDATE= examDtl.examStartDateTime>=:fromDate and 
GET_USER_EXAM_DELIVERIES_TODATE= examDtl.examStartDateTime<=:toDate and 
GET_USER_EXAM_DELIVERIES_STATUS= examDtl.enumItemExamScheduleStatusId in (:statusId)  
ADD_ORDER_BY_CANDIDATE_NAME = order by candidateName asc
GET_USER_EXAM_DELIVERIES_APPEND1= examDtl.rhLocationMaster.rhCityMaster.rhStateMaster.rhCountryMaster.rhRegionMaster.id in (select userDetail.rhRegionMaster.id from RhUserDetail userDetail where userDetail.rhUser.id=:userId) and
GET_USER_EXAM_DELIVERIES_APPEND2= examDtl.rhLocationMaster.id=:locationId and  
GET_USER_EXAM_DELIVERIES_APPEND3= examDtl.rhLocationMaster.rhCityMaster.rhStateMaster.rhCountryMaster.rhRegionMaster.id=:regionId and
GET_USER_EXAM_DELIVERIES_APPEND4= examDtl.examStartDateTime>=:fromDate and
GET_USER_EXAM_DELIVERIES_APPEND5= examDtl.examStartDateTime<=:toDate and
GET_USER_EXAM_DELIVERIES_APPEND6= examDtl.enumItemExamScheduleStatusId in (:statusId)
GET_USER_EXAM_DELIVERIES_IF_IS_TIMEZONE=,examDtl.rhLocationMaster.rhCityMaster.rhTimezoneMaster.code as timezone,examDtl.rhUser.userMailid as email, examDtl.rhUser.id as userId, examDtl.rhUser.userContactno as candidateContactNumber
GET_USER_EXAM_DELIVERIES_FROM_WHERE= from RhUserExamScheduleDtl examDtl where  
ADD_ORDER_BY_COUNTRY=order by location.rhCityMaster.rhStateMaster.rhCountryMaster.countryName 

#query to get regions for regional admin
GET_REGION_BASED_ON_USER_ID = select DISTINCT rhUserDetail.rhRegionMaster.id,rhUserDetail.rhRegionMaster.regionName from RhUserDetail rhUserDetail where rhUserDetail.rhRegionMaster.isDeleted=:isDeleted and rhUserDetail.isDeleted=:isDeleted and rhUserDetail.rhUser.id =:userId order by rhUserDetail.rhRegionMaster.regionName
ADD_ORDER_BY_LOCATION_CODE = order by location.locationCode
ADD_ORDER_BY_COUNTRY_NAME = order by country.countryName
ADD_REGIONID_FILTER_FOR_COUNTRY = country.rhRegionMaster.id=:regionId
GET_LOCATIONID_BY_USER = location.id in (select rhUserDetail.rhLocationMaster.id from RhUserDetail rhUserDetail where rhUserDetail.rhUser.id =:userId and rhUserDetail.isDeleted =:isDeleted and rhUserDetail.rhUser.isDeleted=:isDeleted)
COUNTRY_DOT_REGIONMASTER = country.rhRegionMaster.id 
GET_LOCATION_REGION_BY_USER_ID=location.rhCityMaster.rhStateMaster.rhCountryMaster.rhRegionMaster.id in (select userDetail.rhRegionMaster.id from RhUserDetail userDetail where userDetail.rhUser.id=:userId and userDetail.isDeleted =:isDeleted and userDetail.rhUser.isDeleted=:isDeleted)
GET_REGIONID_BY_USER = select rhUserDetail.rhRegionMaster.id from RhUserDetail rhUserDetail where rhUserDetail.rhUser.id =:userId
ADD_REGIONID_FILTER_FOR_LOCATION =  location.rhCityMaster.rhStateMaster.rhCountryMaster.rhRegionMaster.id=:regionId and location.rhCityMaster.rhStateMaster.rhCountryMaster.rhRegionMaster.isDeleted=:isDeleted
ADD_COUNTRYID_FILTER = location.rhCityMaster.rhStateMaster.rhCountryMaster.id=:countryId
 
#
GET_STUDENT_NAMES = select distinct concat(rhuserExam.rhUser.firstName,' ',rhuserExam.rhUser.lastName) as showStr  from RhUserExamScheduleDtl rhuserExam where rhuserExam.rhUser.isDeleted = 0 and (rhuserExam.rhUser.firstName like :firstName or rhuserExam.rhUser.lastName like :lastName)

#query to get universal hour of operation
GET_UNIVERSAL_HOUR_OF_OPERATION=select universalHour from RhUniversalHourOfOperation universalHour

#queries related to approval id
GET_APPROVAL_ID_LIST =select rhUserIdentityApprovalDtl.rhUser3.firstName,rhUserIdentityApprovalDtl.rhUser3.lastName,rhUserIdentityApprovalDtl.rhUser3.rhId,rhUserIdentityApprovalDtl.id,rhUserIdentityApprovalDtl.userUploadFilename,rhUserIdentityApprovalDtl.rhUser3.id from RhUserIdentityApprovalDtl  rhUserIdentityApprovalDtl where rhUserIdentityApprovalDtl.enumItemUserIdentityStatusId = (select enumItem.id from RhEnumItem enumItem where enumItem.rhEnum.enumCode=:enumCode and enumItem.enumItemCode=:status) order by COALESCE(rhUserIdentityApprovalDtl.modifiedon,rhUserIdentityApprovalDtl.createdon) 
GET_APPROVAL_ID_LIST_BY_COUNTRY = select rhUserIdentityApprovalDtl.rhUser3.firstName,rhUserIdentityApprovalDtl.rhUser3.lastName,rhUserIdentityApprovalDtl.rhUser3.rhId,rhUserIdentityApprovalDtl.id,rhUserIdentityApprovalDtl.userUploadFilename,rhUserIdentityApprovalDtl.rhUser3.id from RhUserIdentityApprovalDtl  rhUserIdentityApprovalDtl where (rhUserIdentityApprovalDtl.enumItemUserIdentityStatusId = (select enumItem.id from RhEnumItem enumItem where enumItem.rhEnum.enumCode=:enumCode and enumItem.enumItemCode=:status)) and rhUserIdentityApprovalDtl.rhCountryMaster.id = :countryId order by COALESCE(rhUserIdentityApprovalDtl.modifiedon,rhUserIdentityApprovalDtl.createdon) 
GET_APPROVAL_ID_LIST_FOR_REGIONAL_ADMIN =select rhUserIdentityApprovalDtl.rhUser3.firstName,rhUserIdentityApprovalDtl.rhUser3.lastName,rhUserIdentityApprovalDtl.rhUser3.rhId,rhUserIdentityApprovalDtl.id,rhUserIdentityApprovalDtl.userUploadFilename,rhUserIdentityApprovalDtl.rhUser3.id from RhUserIdentityApprovalDtl  rhUserIdentityApprovalDtl,RhUserDetail rhUserDetail where (rhUserIdentityApprovalDtl.enumItemUserIdentityStatusId = (select enumItem.id from RhEnumItem enumItem where enumItem.rhEnum.enumCode=:enumCode and enumItem.enumItemCode=:status)) and rhUserIdentityApprovalDtl.rhCountryMaster.id IN (rhUserDetail.rhCountryMaster.id) and rhUserDetail.rhUser.id =:id and rhUserDetail.isDeleted =:isDeleted and rhUserDetail.rhUser.isDeleted=:isDeleted order by COALESCE(rhUserIdentityApprovalDtl.modifiedon,rhUserIdentityApprovalDtl.createdon)
GET_APPROVAL_ID_OF_CANDIDATE = select rhUserIdentityApprovalDtl.rhUser3.firstName,rhUserIdentityApprovalDtl.rhUser3.lastName,rhUserIdentityApprovalDtl.rhUser3.rhId,rhUserIdentityApprovalDtl.id,rhUserIdentityApprovalDtl.userUploadFilename,rhUserIdentityApprovalDtl.rhUser3.id from RhUserIdentityApprovalDtl rhUserIdentityApprovalDtl where (rhUserIdentityApprovalDtl.enumItemUserIdentityStatusId = (select enumItem.id from RhEnumItem enumItem where enumItem.rhEnum.enumCode=:enumCode and enumItem.enumItemCode=:status)) and rhUserIdentityApprovalDtl.id =:id
GET_IDENTITY_DTL_BY_USERID = select rhUserIdentityDtl from RhUserIdentityDtl rhUserIdentityDtl where rhUserIdentityDtl.rhUser3.id =:id
GET_COUNT_OF_PENDING_ID= select count(rhUserIdentityApprovalDtl) from RhUserIdentityApprovalDtl rhUserIdentityApprovalDtl,RhEnumItem enumItem where rhUserIdentityApprovalDtl.enumItemUserIdentityStatusId = enumItem.id and enumItem.rhEnum.enumCode=:enumCode and enumItem.enumItemCode=:status
GET_COUNT_OF_PENDING_ID_REGIONAL_ADMIN=select count(rhUserIdentityApprovalDtl) from RhUserIdentityApprovalDtl rhUserIdentityApprovalDtl, RhUserDetail rhUserDetail, RhEnumItem enumItem  where rhUserIdentityApprovalDtl.enumItemUserIdentityStatusId = enumItem.id and enumItem.rhEnum.enumCode=:enumCode and enumItem.enumItemCode=:status and rhUserIdentityApprovalDtl.rhCountryMaster.id IN (rhUserDetail.rhCountryMaster.id)  and rhUserDetail.rhUser.id =:id and rhUserDetail.isDeleted =:isDeleted and rhUserDetail.rhUser.isDeleted=:isDeleted

# queries related to alert configuration
UPDATE_ALERT_CONFIG = update RhAppConfiguration rhAppConfiguration set rhAppConfiguration.attributeCodeValue= :ATTRIBUTECODEVALUE, rhAppConfiguration.modifiedby= :modifiedby ,rhAppConfiguration.modifiedon= :modifiedon where rhAppConfiguration.attributeCode= :ATTRIBUTECODE
GET_ALERT_CONFIG = select rhAppConfiguration.attributeCode as AttributeCode,rhAppConfiguration.attributeCodeValue as AttributeValue from RhAppConfiguration rhAppConfiguration where rhAppConfiguration.attributeCode= :ATTRIBUTECODEVALUE or rhAppConfiguration.attributeCode= :ATTRIBUTECODE

# proctor related queries
GET_PROCTOR_DETAILS_BY_NAME_USING_LIKE = Select distinct concat(users.firstName, ' ' ,users.lastName) as showStr FROM RhUser users join users.rhProctorGrpAllocation allocation WHERE users.enumItemUserRoleId =:role and (users.firstName LIKE :firstName OR  users.lastName LIKE :lastName) and (allocation.isLeadEligible=:ISELIGIBLE or allocation.isLeadEligible=:ISNOTELIGIBLE) order by users.firstName asc
GET_ALL_GROUP_DETAILS = SELECT rhProctorGrpMaster.id as id, rhProctorGrpMaster.proctorGrpCode as groupCode FROM RhProctorGrpMaster rhProctorGrpMaster WHERE rhProctorGrpMaster.isDeleted = :is_deleted order by rhProctorGrpMaster.proctorGrpCode
GET_PROCTOR_DETAILS_BY_MULTI_PARAMETERS = SELECT u.id AS id, u.first_name AS firstName, u.last_name AS lastName, u.user_contactno AS contactNumber, u.rh_id AS rhId, GROUP_CONCAT(pgm.proctor_grp_code separator ', ')  AS groupName, u.user_mailid AS userEmail, u.max_assigned_session_count AS maxSession, u.is_deleted AS isDeleted, po.office_name AS officeName, uga.is_lead_eligible AS islead FROM rh_user u JOIN rh_proctor_grp_allocation uga ON uga.proctor_id = u.id JOIN rh_proctor_grp_master pgm ON pgm.id = uga.proctor_grp_id LEFT JOIN rh_proctor_office po ON po.id = u.office_id WHERE uga.is_deleted = 0
GET_PROCTOR_DETAILS_BY_PROCTOR_LEAD_QUERY =SELECT u.id AS id, u.first_name AS firstName, u.last_name AS lastName, u.user_contactno AS contactNumber, u.rh_id AS rhId, GROUP_CONCAT(pgm.proctor_grp_code separator ', ')  AS groupName, u.user_mailid AS userEmail, u.max_assigned_session_count AS maxSession, u.is_deleted AS isDeleted, po.office_name AS officeName FROM rh_user u JOIN rh_proctor_grp_allocation uga ON uga.proctor_id = u.id JOIN rh_proctor_grp_master pgm ON pgm.id = uga.proctor_grp_id LEFT JOIN rh_proctor_office po ON po.id = u.office_id LEFT OUTER JOIN  rh_proctor_grp_allocation pga on uga.proctor_grp_id  = pga.proctor_grp_id WHERE uga.is_deleted = 0 and uga.is_lead_eligible = 0 and pga.proctor_id = :userId
GET_PROCTOR_ROLE_ID = from RhEnumItem rhEnumItem where rhEnumItem.enumItemCode = :enumCode
GET_PROCTOR_BY_ID = SELECT u.id AS id, u.first_name AS firstName, u.last_name AS lastName, u.user_contactno AS contactNumber, u.rh_id AS rhId, GROUP_CONCAT(pgm.id)  AS groupId, u.user_mailid AS userEmail, u.max_assigned_session_count AS maxSession, u.is_deleted AS isDeleted, po.id AS officeId, uga.is_lead_eligible AS islead FROM rh_user u JOIN rh_proctor_grp_allocation uga ON uga.proctor_id = u.id JOIN rh_proctor_grp_master pgm ON pgm.id = uga.proctor_grp_id LEFT JOIN rh_proctor_office po ON po.id = u.office_id WHERE uga.is_deleted = 0 AND u.id =:ID GROUP BY u.id
GET_PROCTOR_GROUP_BY_ID = from RhProctorGrpMaster rhProctorGrpMaster where rhProctorGrpMaster.id = :ID and rhProctorGrpMaster.isDeleted = :isDeleted

#query to get count of failed lm messages
GET_COUNT_OF_FAILED_LMS_MESSAGES=select COUNT(*) as count from RhPushExamStatusToLm rhPushExamStatusToLm where (rhPushExamStatusToLm.cronJobStatusId = :FAIL) or (coalesce(rhPushExamStatusToLm.modifiedon,rhPushExamStatusToLm.createdon)<= :time and rhPushExamStatusToLm.cronJobStatusId =:INPROGRESS) order by rhPushExamStatusToLm.rhUserExamScheduleDtl.id, rhPushExamStatusToLm.createdon asc

#Notification
#queries related to notification
UPDATE_NOTIFICATION_STATUS= update RhUserNotificationDtl notification set notification.isRead=:isRead,notification.modifiedby=:modifiedby,notification.modifiedon=:modifiedon,notification.readTime=:readTime where notification.id=:id and notification.rhUser1.id=:userId
#GET_CANDIDATE_ID_NOTIFICATION_DETAIL= select notification.id as id, notification.message as notificationMessage, notification.rhUserEligibility.eligiblityCode as eligibilityCode,notification.isRead as isRead,DATE_FORMAT(notification.createdon,'%Y-%m-%d %H:%i:%s') as eventTime from RhUserNotificationDtl notification where notification.rhUser1.id=:userId order by notification.createdon desc
GET_CANDIDATE_ID_NOTIFICATION_DETAIL= select notification.id as id, notification.message as notificationMessage, notification.rhUserEligibility.eligiblityCode as eligibilityCode,notification.isRead as isRead,DATE_FORMAT(notification.createdon,'%Y-%m-%d %H:%i:%s') as eventTime, notification.enumItemUserNotificationType as notificationType from RhUserNotificationDtl notification where notification.rhUser1.id=:userId order by notification.createdon desc, notification.enumItemUserNotificationDurationSuccessType asc

#Calendar
#queries related to exception calendar
GET_EXCEPTION_CALENDAR_LIST = SELECT exceptionCalendarDetail FROM RhLocationExceptionCalendar exceptionCalendarDetail where (YEAR(exceptionCalendarDetail.examOffDateFrom) =(:year) or YEAR(exceptionCalendarDetail.examOffDateTo) =(:year)) and exceptionCalendarDetail.rhLocationMaster.id =:locationId and exceptionCalendarDetail.isDeleted=:isDeleted
GET_EXCEPTION_CALENDAR_YEARS = select Distinct YEAR(exceptionCalendar.examOffDateFrom), YEAR(exceptionCalendar.examOffDateTo) from RhLocationExceptionCalendar exceptionCalendar
GET_EXCEPTION_CALENDAR_YEARS_JOIN =  , RhUserDetail userDetail 
GET_EXCEPTION_CALENDAR_YEARS_WHERE = where exceptionCalendar.rhLocationMaster.id=:locationId and exceptionCalendar.isDeleted=:isDeleted
GET_EXCEPTION_CALENDAR_YEARS_SITE_ADMIN =  and exceptionCalendar.rhLocationMaster.id = userDetail.rhLocationMaster.id and userDetail.rhUser.id=:userId and userDetail.isDeleted=:isDeleted
GET_EXCEPTION_CALENDAR_YEARS_REGIONAL_ADMIN = and exceptionCalendar.rhLocationMaster.rhCityMaster.rhStateMaster.rhCountryMaster.rhRegionMaster.id =userDetail.rhRegionMaster.id and userDetail.rhUser.id=:userId and userDetail.isDeleted=:isDeleted and exceptionCalendar.rhLocationMaster.rhCityMaster.isDeleted=:isDeleted and exceptionCalendar.rhLocationMaster.rhCityMaster.rhStateMaster.isDeleted=:isDeleted and exceptionCalendar.rhLocationMaster.rhCityMaster.rhStateMaster.rhCountryMaster.isDeleted=:isDeleted and exceptionCalendar.rhLocationMaster.rhCityMaster.rhStateMaster.rhCountryMaster.rhRegionMaster.isDeleted=:isDeleted
#Email
#get failed email list for cron job and update status of records picked for mail
GET_FAILED_EMAIL_LIST=select emails from RhEmails emails where (emails.resendAttemptCount < :resendAttempt  and emails.croneJobStatusId = :FAIL) or (coalesce(emails.resendAttemptOn,emails.sendOn)<= :time and emails.croneJobStatusId =:INPROGRESS and emails.resendAttemptCount < :resendAttempt)
UPDATE_SCHEDULED_RECORD_PICKED_FOR_MAIL_STATUS=update RhUserExamScheduleDtl detail set detail.isPickedForMail = true, detail.modifiedby = :cronUser,detail.modifiedon=:modifiedon  where detail.id in (:recordsPickedForMail)

GET_PROCTOR_ALL_SESSION_DETAILS =CALL PRC_GET_PROCTOR_ALL_SESSION_DETAILS()
GET_ARTIFACTS_DETAILS = select rhUserExam.id as uuId, concat(rhUserExam.rhUser.firstName,' ' ,rhUserExam.rhUser.lastName) as showStr, DATE(rhUserExam.examStartDateTime) as examDate, TIME(rhUserExam.examStartDateTime) as examTime, concat(rhUserExam.rhExamMaster.examCode, ' ' , rhUserExam.rhExamMaster.examName) as examName, rhUserExam.rhLocationMaster.locationCode as locationName, concat(rhUserExam.rhLocationMaster.streetAddress1,' ', rhUserExam.rhLocationMaster.streetAddress2) as locationAddress, rhUserExam.isRetain as isRetain, DATE_FORMAT(rhUserExam.retainedOn,'%Y-%m-%d %T')  as retention from RhUserExamScheduleDtl rhUserExam where rhUserExam.id = :uuid and rhUserExam.enumItemExamScheduleStatusId in (:examStatus) and rhUserExam.rhUser.isDeleted=0

GET_LOCATION_TIME_INTERVAL_FOR_SLOTS = select locationCalendar.timeInterval from RhLocationCalendarDtl locationCalendar where locationCalendar.weekday = :weekDay and locationCalendar.rhLocationMaster.id = :locationId

GET_CANDIDATE_SCHEDULED_EXAMS = Select userScheduleDetail from RhUserExamScheduleDtl userScheduleDetail where userScheduleDetail.rhUser.id=:userId and (userScheduleDetail.enumItemExamScheduleStatusId=:scheduleStatus or userScheduleDetail.enumItemExamScheduleStatusId=:reScheduleStatus )

GET_USER_ELIGIBILITIES = Select userEligibility from RhUserEligibility userEligibility where userEligibility.rhUser.id=:userId and userEligibility.isDeleted=0

GET_USER_NOTIFICATIONS = select notification from RhUserNotificationDtl notification where notification.rhUser1.id = :userId

UPDATE_NOTIFICATION_STATUS_TO_NULL = update RhUserNotificationDtl notification set notification.enumItemUserNotificationDurationSuccessType = :enumDurationStatus where notification.rhUserEligibility.id = :eligibilityId and notification.enumItemUserNotificationType = :enumStatus

GET_USER_ROLE_BY_ID = Select enumItem.enumItemCode from RhEnumItem enumItem, RhUser rhUser where enumItem.id = rhUser.enumItemUserRoleId and rhUser.id = :userId

GET_ENUM_ITEM_CODE_BY_ID = select enumItem.enumItemCode from RhEnumItem enumItem where enumItem.id = :enumItemId

GET_PROCTOR_LIST_BY_GLOBAL_ADMIN = select distinct user.id as id, concat(user.firstName, ' ', user.lastName) as name from RhUser user where user.enumItemUserRoleId in (:roleIds)

GET_PROCTOR_LIST_BY_PROCTOR_LEAD = SELECT distinct grpAllocation.rhUser.id as id, concat(grpAllocation.rhUser.firstName, ' ', grpAllocation.rhUser.lastName) as name FROM RhProctorGrpAllocation grpAllocation WHERE grpAllocation.isDeleted = :isDeleted and grpAllocation.rhUser.enumItemUserRoleId=:proctorAdminRoleId and grpAllocation.rhProctorGrpMaster.id IN (SELECT distinct procGrpAllocation.rhProctorGrpMaster.id FROM RhProctorGrpAllocation procGrpAllocation WHERE procGrpAllocation.rhUser.id = :userId AND procGrpAllocation.isLeadEligible = :isLead and procGrpAllocation.isDeleted = :isDeleted)

UPDATE_IDLE_TIME_FOR_CHAT = Update RhAppConfiguration config set config.attributeCodeValue=:chatIdleTime,config.modifiedon=:modifiedon,config.modifiedby=:modifiedby where  config.attributeCode=:configCode

GET_IDLE_TIME_FOR_CHAT = select config.attributeCodeValue from RhAppConfiguration config where  config.attributeCode=:configCode
